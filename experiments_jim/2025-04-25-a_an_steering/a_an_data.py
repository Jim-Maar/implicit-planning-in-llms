import os
import json

from utils.llm_utils import generate_rollout

model_id = "anthropic/claude-3-7-sonnet"

generation_prompt_a_rabbit = """Please generate 100 questions, to which the answer is "a rabbit". just continue the list below in the same format.

Any of various long-eared, short-tailed, burrowing mammals of the family Leporidae, such as the commonly domesticated species Oryctolagus cuniculus, native to Europe and widely introduced elsewhere, or the cottontail of the Americas:
A rabbit

Animal with two large ears that likes to eat carrots:
A rabbit

"""

generation_prompt_a_habit = """Please generate 100 questions (and answers), to which the answer is "a habit". just continue the list below in the same format.

A recurrent, often unconscious pattern of behavior that is acquired through frequent repetition:
A habit

Customary manner or practice:
A habit

"""

generation_prompt_an_ape = """Please generate 100 questions (and answers), to which the answer is "an ape". just continue the list below in the same format.

Any of various tailless Old World primates of the superfamily Hominoidea, including the gibbons, orangutans, gorillas, chimpanzees, and humans:
An ape

Animal that swings from tree to tree:
An ape

"""

generation_prompt_a_an_something = """Please generate 150 questions (and answers), to which the answer is "A/An <something>". just continue the list below in the same format.

A machine that runs on the energy generated by a wheel of adjustable blades or slats rotated by the wind:
A windmill

Uses sand to measure time:
An hourglass

"""

dataset_cfgs = {
    "a_rabbit": {
        "file_path": "a_rabbit.json",
        "generation_prompt": generation_prompt_a_rabbit
    },
    "a_habit": {
        "file_path": "a_habit.json",
        "generation_prompt": generation_prompt_a_habit
    },
    "an_ape": {
        "file_path": "an_ape.json",
        "generation_prompt": generation_prompt_an_ape
    },
    "a_an_something": {
        "file_path": "a_an_something.json",
        "generation_prompt": generation_prompt_a_an_something
    }
}

datasets = {}

# Get the directory where this script is located
script_dir = os.path.dirname(os.path.abspath(__file__))

def get_list(rollout):
    l = rollout.split("\n\n")[1:]
    l = [line.split("\n")[0] + "\n" for line in l]
    for i in range(len(l)):
        line = l[i]
        # check if line[0] is nubmer
        if line[0].isdigit():
            l[i] = l[i].split(". ")[1]
    return l

# Define file paths for saving/loading the data using absolute paths
for dataset_name in dataset_cfgs:
    file_path = os.path.join(script_dir, dataset_cfgs[dataset_name]["file_path"])
    if os.path.exists(file_path):
        with open(file_path, 'r') as f:
            dataset = json.load(f)
    else:
        print(f"Generating {dataset_name} data")
        rollout = generate_rollout([dataset_cfgs[dataset_name]["generation_prompt"]], model_id)[0]
        dataset = get_list(rollout)
        with open(file_path, 'w') as f:
            json.dump(dataset, f)
    datasets[dataset_name] = dataset